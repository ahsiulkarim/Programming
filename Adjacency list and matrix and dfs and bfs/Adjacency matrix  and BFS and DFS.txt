#include <iostream>
using namespace std;

int main() {
    int n, edges;
    cout << "Enter the number of nodes: ";
    cin >> n;

    // Initialize an n x n adjacency matrix with all zeros
    int adjMatrix[100][100]; // Assuming a maximum size of 100x100
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            adjMatrix[i][j] = 0;
        }
    }

    cout << "Enter the number of edges: ";
    cin >> edges;

    cout << "Enter the edges (u v for each edge):" << endl;
    for (int i = 0; i < edges; i++) {
        int u, v;
        cin >> u >> v;
        adjMatrix[u][v] = 1; // Mark edge from u to v
        adjMatrix[v][u] = 1; // Uncomment for an undirected graph
    }

    // Print the adjacency matrix
    cout << "The adjacency matrix is:" << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << adjMatrix[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}





#include <iostream>
#include <vector>
#include <queue>

using namespace std;

void bfs(int startNode, const vector<vector<int>>& adjList) {
    int n = adjList.size();
    vector<bool> visited(n, false); // Track visited nodes
// 2->3->4
    queue<int> q;
    q.push(startNode);
    visited[startNode] = true;

    while (!q.empty()) {
        int currentNode = q.front();
        q.pop();

        // Process the current node
        cout << currentNode << " ";

        // Visit all unvisited neighbors 2 4
        for (int neighbor : adjList[currentNode]) {
            if (!visited[neighbor]) {
                visited[neighbor] = true;
                q.push(neighbor);
            }
        }
    }
}

int main() {
    int n = 5; // Number of nodes
    vector<vector<int>> adjList(n);

    // Add edges to the adjacency list
    adjList[0] = {1, 2}; // Edges from node 0 to 1 and 2
    adjList[1] = {0, 3, 4}; // Edges from node 1 to 0, 3, and 4
    adjList[2] = {0}; // Edge from node 2 to 0
    adjList[3] = {1}; // Edge from node 3 to 1
    adjList[4] = {1}; // Edge from node 4 to 1

    cout << "BFS traversal starting from node 0:" << endl;
    bfs(0, adjList);

    return 0;
}


#include <iostream>
#include <vector>

using namespace std;

void dfs(int node, const vector<vector<int>>& adjList, vector<bool>& visited) {
    // Mark the current node as visited and print it
    visited[node] = true;
    cout << node << " ";

    // Recur for all the vertices adjacent to this vertex
    for (int neighbor : adjList[node]) {
        if (!visited[neighbor]) {
            dfs(neighbor, adjList, visited);
        }
    }
}
   void addEdge(vector<vector<int>> &adjList, int s, int t){
    adjList[s].push_back(t);
    adjList[t].push_back(s);
 }
int main() {
    int n = 5; // Number of nodes
    vector<vector<int>> adjList(n);

  addEdge(adjList, 0, 1);
  addEdge(adjList, 0, 2);
  addEdge(adjList, 0, 3);
  addEdge(adjList, 2, 4);

    vector<bool> visited(n, false); // Track visited nodes

    cout << "DFS traversal starting from node 0:" << endl;
    dfs(0, adjList, visited);

    return 0;
}


